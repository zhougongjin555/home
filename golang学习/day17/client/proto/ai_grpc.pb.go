// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: ai.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AiRepliesClient is the client API for AiReplies service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AiRepliesClient interface {
	// 双向流式rpc
	Reply(ctx context.Context, opts ...grpc.CallOption) (AiReplies_ReplyClient, error)
}

type aiRepliesClient struct {
	cc grpc.ClientConnInterface
}

func NewAiRepliesClient(cc grpc.ClientConnInterface) AiRepliesClient {
	return &aiRepliesClient{cc}
}

func (c *aiRepliesClient) Reply(ctx context.Context, opts ...grpc.CallOption) (AiReplies_ReplyClient, error) {
	stream, err := c.cc.NewStream(ctx, &AiReplies_ServiceDesc.Streams[0], "/AiReplies/Reply", opts...)
	if err != nil {
		return nil, err
	}
	x := &aiRepliesReplyClient{stream}
	return x, nil
}

type AiReplies_ReplyClient interface {
	Send(*Inputs) error
	Recv() (*Replies, error)
	grpc.ClientStream
}

type aiRepliesReplyClient struct {
	grpc.ClientStream
}

func (x *aiRepliesReplyClient) Send(m *Inputs) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aiRepliesReplyClient) Recv() (*Replies, error) {
	m := new(Replies)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AiRepliesServer is the server API for AiReplies service.
// All implementations must embed UnimplementedAiRepliesServer
// for forward compatibility
type AiRepliesServer interface {
	// 双向流式rpc
	Reply(AiReplies_ReplyServer) error
	mustEmbedUnimplementedAiRepliesServer()
}

// UnimplementedAiRepliesServer must be embedded to have forward compatible implementations.
type UnimplementedAiRepliesServer struct {
}

func (UnimplementedAiRepliesServer) Reply(AiReplies_ReplyServer) error {
	return status.Errorf(codes.Unimplemented, "method Reply not implemented")
}
func (UnimplementedAiRepliesServer) mustEmbedUnimplementedAiRepliesServer() {}

// UnsafeAiRepliesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AiRepliesServer will
// result in compilation errors.
type UnsafeAiRepliesServer interface {
	mustEmbedUnimplementedAiRepliesServer()
}

func RegisterAiRepliesServer(s grpc.ServiceRegistrar, srv AiRepliesServer) {
	s.RegisterService(&AiReplies_ServiceDesc, srv)
}

func _AiReplies_Reply_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AiRepliesServer).Reply(&aiRepliesReplyServer{stream})
}

type AiReplies_ReplyServer interface {
	Send(*Replies) error
	Recv() (*Inputs, error)
	grpc.ServerStream
}

type aiRepliesReplyServer struct {
	grpc.ServerStream
}

func (x *aiRepliesReplyServer) Send(m *Replies) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aiRepliesReplyServer) Recv() (*Inputs, error) {
	m := new(Inputs)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AiReplies_ServiceDesc is the grpc.ServiceDesc for AiReplies service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AiReplies_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AiReplies",
	HandlerType: (*AiRepliesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Reply",
			Handler:       _AiReplies_Reply_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ai.proto",
}
